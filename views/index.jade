extend layout

block content
  .container-fluid
    #title
      h1 Welcome to MetricsManager 1.0

    #menu
      table
        tr
          td
            a(class='btn btn-info', href='./') Home
          td Hello, #{name}, you are connected to your personal account.
          td
            a(class='btn btn-danger', href='/logout') Logout

    #content
      h2 #{name}'s metrics
      div.col-md-4

        form#addMetric(action='/addMetric', method="get")
          .form-group.col-md-4
            button.btn.btn-info(type='submit') Add Metric
        button.btn.btn-success.col-md-4#get-metrics Show Metrics
      br
      #graph.aGraph
      #metrics


    script
      :coffee-script
        $('#get-metrics').one 'click', (e) ->
          e.preventDefault()
          $.getJSON '/metrics.json', (metrics) ->
            $('#content').empty()
            c = "<h1>Your Personal Metrics</h1><br/><table class='table table-striped'><tr class='info'><th>Timestamp</th><th>Value</th></tr>"
            values = []
            timestamps = []
            for metric in metrics
              c+="<tr><td>#{metric.timestamp}</td><td>#{metric.value}</td></tr>"
              values.push parseInt("#{metric.value}")
              timestamps.push parseInt("#{metric.timestamp}")
            c+="</table>"
            showGraph values, timestamps
            $('#metrics').append c

        showGraph = (values, timestamps) ->
          $('#graph.aGraph').append "<h1>Metrics Summary</h1>"
          margins = [80, 80, 80, 80]
          width = 1000 - (margins[1]) - (margins[3])
          height = 400 - (margins[0]) - (margins[2])

          # Define x and y axis
          x = d3.scale.linear().domain([0, values.length]).range([0, width])
          y = d3.scale.linear().domain([0, d3.max(values)]).range([height, 0])

          # create a line function that can convert values[] into x and y points
          line = d3.svg.line().x((d, i) ->
            x i
          ).y((d) ->
            y d
          )

          graph = d3.select('#graph').append('svg:svg').attr('width', width + margins[1] + margins[3]).attr('height', height + margins[0] + margins[2]).append('svg:g').attr('transform', 'translate(' + margins[3] + ',' + margins[0] + ')')

          # Display time in format 2015-12-01 10:35 UTC
          formatTimestamp = (d) ->
            if timestamps[d]?
              date = new Date(timestamps[d])
              year = date.getFullYear()
              month = date.getMonth()+1
              day = date.getDate()
              hours = date.getHours()
              minutes = '0' + date.getMinutes()
              return formattedTime = year + '-' + month + '-' + day + ' ' + hours + ':' + minutes.substr(-2) + ' UTC'
            else
              return ''


          xAxis = d3.svg.axis().scale(x).ticks(timestamps.length).outerTickSize(0).tickFormat(formatTimestamp).tickSize(-height).tickSubdivide(true)
          graph.append('svg:g').attr('class', 'x axis').attr('transform', 'translate(0,' + height + ')').call xAxis

          yAxisLeft = d3.svg.axis().scale(y).ticks(6).orient('left')
          graph.append('svg:g').attr('class', 'y axis').attr('transform', 'translate(-25,-5)').call yAxisLeft

          graph.append('svg:path').attr 'd', line(values)
